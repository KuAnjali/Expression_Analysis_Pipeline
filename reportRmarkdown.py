#!/usr/bin/python
import ConfigParser, os,sys,subprocess
from functions import *
config_file  ='app.cfg'
config = ConfigParser.ConfigParser()
config.readfp(open(config_file))
def report(outDir,ProjectID):
	
	copy1='cp %s/tmp.docx %s/%s/'%(config.get('files','report_files'),outDir,ProjectID)
	osSys(copy1)
	copy2='cp %s/pipeline_hisat.png %s/%s/'%(config.get('files','report_files'),outDir,ProjectID)
	osSys(copy2)
	reportFile_doc=open(outDir+'/'+ProjectID+'/'+ProjectID+'_Report_doc_final.Rmd','w')
	reportFile_doc.write('---\nheader-includes:\n- \usepackage{fancyhdr}\n- \usepackage{lipsum}\n- \pagestyle{fancy}\n- \\fancyhead[CO,CE]{This fancy header}\n- \\fancyfoot[CO,CE]{And this is a fancy footer}\n- \\fancyfoot[LE,RO]{\\thepage}\noutput:\n  word_document:\n    fig_caption: yes\n    reference_docx: tmp.docx\n    toc: yes\n---\n\n\n##### Page Break\n```{r setup, include=FALSE, warning=FALSE}\nknitr::opts_chunk$set(echo = TRUE)\npkg <- c("rmarkdown","knitr", "devtools", "DT", "xtable","kableExtra","ggplot2","captioner")\nnew.pkg <- pkg[!(pkg %in% installed.packages())]\nif (length(new.pkg)) {\n  install.packages(new.pkg, repos = "http://cran.rstudio.com")\n}\nlibrary(knitr)\nlibrary(DT)\nlibrary(xtable)\nlibrary(kableExtra)\nlibrary(captioner)\ntable_nums<-captioner(prefix= "Table.")\n```\n# Executive Summary\n\n##### Page Break\n\n# Overview\n\n## Sample Information\n\nFollowing samples were sequenced and analyzed.\n\n```{r tab.cap="Samples", echo=FALSE}\nconfig=read.table(file="sampleInfo.txt", header = FALSE, sep="\\t")\nconfig_s=config[,c(1,2)]\ncolnames(config_s)=c("Sample-Label","Case/Control")\nkable(config_s,format="pandoc",caption = "Table 1: Sample information");\n```\n\n## Quality Metrics\n\nTable 2 summarizes the overall data generated and the average read quality observed across the reads.\n```{r tab.cap="Samples", echo=FALSE}\nconfig=read.table(file="FastQSummary.txt", header = TRUE, sep="\\t")\nconfig_s=config[,c(1,2,3,4,5,6,7,8)]\ncolnames(config_s)=c("Sample Name","Total No. of Reads","Average Base Quality","GC Percentage","Total Data >= Q30 %","Total Data >= Q20 and < 30 %","Total Data >= Q10 and < 20 %","Average Read Length")\nkable(config_s, format= "pandoc", caption = "Table 2: FASTQC data summary");\n```\n\n##### Page Break\n\n# Data Analysis\n\n##Read Count Summary\n\n```{r tab.cap="Samples", echo=FALSE}\nconfig=read.table(file="ReadCount_summary.txt", header = TRUE, sep="\\t")\nconfig_s=config[,c(1,2,3,4,5,6)]\ncolnames(config_s)=c("Sample Name","Total Reads","Read Count After Adapter Trimming","Read Count After Contamination Removal","Reads Aligned"," Alignment %")\nkable(config_s, format= "pandoc", caption = "Table 3: Read Count Summary");\n```\n\nReads filtered at each preprocessing step and alignment is summarized.\n\n```{r, echo=FALSE, warning=FALSE, message=FALSE, fig.align=\'centre\', fig.cap="Figure 1: Alignment metrics.Stacked bar plot showing percentage of read filtered and aligned at each step"}\nlibrary (scales)\nlibrary(ggplot2)\nlibrary(reshape2)\nalign <- read.table("Alignment_Plot.txt",header=TRUE,sep="\\t", check.names = FALSE)\nmeltstack <- melt(align)\nmeltstack$variable <- factor(meltstack$variable, levels=c("Adapter Reads","Contaminated Reads","Aligned Reads","Unaligned Reads"))\nggplot(meltstack, aes(x=SampleName, y=value, fill=variable))+ geom_bar(stat="identity", position = "fill") + scale_y_continuous(labels = percent_format())+theme_bw()+theme(strip.text = element_text(size=10, face="bold", family="cambria"), axis.text.x=element_text(size=8,family="cambria", face="bold",angle=90,hjust=1), axis.title.x = element_blank(), axis.title.y=element_text(family="cambria", size=12, face="bold"), axis.text.y = element_text(size=8,family="cambria"), legend.text = element_text(family = "cambria", size=10), plot.title = element_text(size=12, face="bold", family="cambria", hjust = 0.5), plot.subtitle = element_text(size=12, family="cambria", hjust = 0.5), panel.grid = element_blank(), axis.ticks.x = element_blank(),legend.title = element_blank(), legend.position = "right", legend.direction = "vertical") + ggtitle("Alignment metrics") + labs(y="Percentage of reads")\n```\n\n##### Page Break \n\n#### Sequence Alignment Distribution\n\n```{r tab.cap="Samples", echo=FALSE}\nconfig=read.table(file="Sequence_alignment_dist.txt", header = TRUE, sep="\\t")\nconfig_s=config[,c(1,2,3,4,5)]\ncolnames(config_s)=c("SampleName","Exonic","Intronic","Intergenic","Overlapping exon")\nkable(config_s, format= "pandoc", caption = "Table 4: Distribution of Read in genomic regions")\n```\n\n##### Page Break\n\n##### Analysis of Splice Junction\n\n```{r, echo=FALSE, warning=FALSE, message=FALSE , fig.align="centre",fig.cap="Figure 2: Splice Junction Distribution metrics: Stacked bar plot showing Number of reads distributed in known and novel Splice Junction"}\nlibrary(scales)\nlibrary(ggplot2)\nlibrary(reshape2)\nalign <- read.table("Splice_Junction_Distribution.txt",header=TRUE,sep="\\t", check.names = FALSE)\nmeltstack <- melt(align)\nmeltstack$variable <- factor(meltstack$variable, levels=c("SampleName","Total splicing Junctions","Known Splicing Junctions","Partial Novel Splicing Junctions","Novel Splicing Junctions"))\nggplot(meltstack, aes(x=SampleName, y=value, fill=variable))+geom_bar(stat="identity", position = "fill")+scale_y_continuous(labels = percent_format())+theme_bw()+theme(strip.text = element_text(size=10, face="bold", family="cambria"),axis.text.x = element_text(size=8,family="cambria", face="bold",angle=90,hjust=1), axis.title.x = element_blank(), axis.title.y=element_text (family="cambria", size=12, face="bold"), axis.text.y = element_text(size=8,family="cambria"), legend.text = element_text(family = "cambria", size=10), plot.title = element_text(size=12, face="bold", family="cambria", hjust = 0.5), plot.subtitle = element_text(size=12, family="cambria", hjust = 0.5), panel.grid = element_blank(), axis.ticks.x = element_blank(),legend.title = element_blank(), legend.position = "right", legend.direction = "vertical") + ggtitle("Splice Junction Distribution")+ labs(y="Number of Splice Junctions")\n```\n\n##### Page Break\n\n###PCA\n Principal Component Analysis (PCA) is a statistical technique used to identify global patterns in high-dimensional datasets. It is commonly used to explore the similarity of biological samples in RNA-seq datasets. To achieve this, gene expression values are transformed into Principal Components (PCs), a set of linearly uncorrelated features which represent the most relevant sources of variance in the data, and subsequently visualized using a scatter plot.\n\n```{r, echo=FALSE, warning=FALSE, message=FALSE , fig.align="centre",fig.cap="Figure 3: The figure displays an interactive, three-dimensional scatter plot of the first three Principal Components (PCs) of the data. Each point represents an RNA-seq sample. Samples with similar gene expression profiles are closer in the three-dimensional space. If provided, sample groups are indicated using different colors, allowing for easier interpretation of the results."}\nlibrary (scales)\nlibrary(ggplot2)\nlibrary(reshape2)\nmydata <- read.table("Deseq_input_merge_count.txt",header=TRUE,sep="\\t", check.names = FALSE, row.names = 1)\ntmydata <- t(mydata)\npcaCars <- prcomp(tmydata, cor = TRUE)\ncarsHC <- hclust(dist(pcaCars$x))\ncarsClusters <- cutree(carsHC, k = 3)\ncarsDf <- data.frame(pcaCars$x, "cluster" = factor(carsClusters))\ncarsDf <- transform(carsDf, cluster_name = paste("Cluster",carsClusters))\nlibrary(plotly)\np <- plot_ly(carsDf, x = carsDf$PC1 , y = carsDf$PC2, text = rownames(carsDf), mode = "markers", color = carsDf$cluster_name, marker = list(size = 11))\np <- layout(p, title = "PCA Clusters of the samples",xaxis = list(title = "PC 1"),yaxis = list(title = "PC 2"))\np\n```\n\n##### Page Break\n\n ## Differential Expression\n\nGene expression signatures are alterations in the patterns of gene expression that occur as a result of cellular perturbations such as drug treatments, gene knock-downs or diseases. They can be quantified using differential gene expression (DGE) methods, which compare gene expression between two groups of samples to identify genes whose expression is significantly altered in the perturbation. The signature table is used to display the results of such analyses.\n\n```{r tab.cap="Samples", echo=FALSE}\nconfig=read.table(file="Differential_expressed_genes_summary.txt", header = TRUE, sep="\\t")\nconfig_s=config[,c(1,2,3)]\ncolnames(config_s)=c("Comparision", "Number of Upregulated Genes", "Number of Upregulated Genes")\nkable(config_s,format="pandoc", caption = "Table 5: Differentially expressed genes")\n```\n\n##### Volcano Plot\n\nVolcano plots are a type of scatter plot commonly used to display the results of a differential gene expression analysis. They can be used to quickly identify genes whose expression is significantly altered in a perturbation, and to assess the global similarity of gene expression in two groups of biological samples. Each point in the scatter plot represents a gene; the axes display the significance versus fold-change estimated by the differential expression analysis.\n\n```{r, echo=FALSE, warning=FALSE, message=FALSE , fig.align="centre",fig.cap="Figure 4: The figure contains a scatter plot which displays the log2-fold changes and statistical significance of each gene calculated by performing a differential gene expression analysis. Every point in the plot represents a gene. Red points indicate significantly up-regulated genes, blue points indicate down-regulated genes."}\nlibrary(grid)\nres=read.table(file="Deseq_result.txt", header = TRUE, sep="\t")\nval = -log10(0.05)\nvolcanoplot <- function (res, sigthresh=0.05, main="Volcano Plot", legendpos="topright", labelsig=TRUE, textcx=1, ...) {\n with(res, plot(log2FoldChange, -log10(pvalue), pch=20, main=main, ...))\n with(subset(res, pvalue<sigthresh ), points(log2FoldChange, -log10(pvalue), pch=20, col="green", ...))\n with(subset(res, pvalue<sigthresh & (log2FoldChange)> 1), points(log2FoldChange, -log10(pvalue), pch=20, col="red", ...))\n with(subset(res, pvalue<sigthresh & (log2FoldChange) < -1), points(log2FoldChange, -log10(pvalue), pch=20, col="blue", ...)) \nabline(h=val, lty=2, col="black") \nabline(v=2,lty=2,col="black") \nabline(v=-2,lty=2,col="black") \nlegend(legendpos, xjust=1, yjust=1, legend=c("InSignificant", "Significant-UP", "Significant-Down"),col=c("black","red","blue"),pch=20) \n}\nvolcanoplot(res, sigthresh=0.05, textcx=.8, ylim=c(0, 4))\n```\n\n##### Heatmap\n\n Heatmaps help in the visualization of the top upregulated and downregulated genes\n\n```{r, echo=FALSE, warning=FALSE, message=FALSE , fig.align="centre",fig.cap="Figure 5: The figure shows an interactive heatmap plot which displays the top 50 up-regulated genes and down-regulated genes on a gradient scale based on expression"}\nlibrary(grid)\ntop100 <- read.table("Combined_top50_genes_normalised_readcount_genename.txt", header=TRUE, check.names=FALSE, row.names = 1)\nmydata <- top100[c(2:5)]\ndata=as.matrix(mydata)\nplot_ly(x=colnames(data), y=rownames(data), z = data, type = "heatmap")\n```\n\n##### Page Break\n\n#####Gene Ontology Enrichment Analysis\nGene Ontology (GO) is a major bioinformatics initiative aimed at unifying the representation of gene attributes across all species. It contains a large collection of experimentally validated and predicted associations between genes and biological terms. This information can be leveraged by Enrichr to identify the biological processes, molecular functions and cellular components which are over-represented in the up-regulated and down-regulated genes identified by comparing two groups of samples.\n\n##### Molecular Function\n\n## Upregulated \n\n```{r tab.cap="Samples", echo=FALSE}\nconfig=read.table(file="GO_Molecular_Function_Upregulated.tsv", header = TRUE, sep="\\t")\nconfig_s=config[,c(1,2,3,4,5,6,7,8)]\ncolnames(config_s)=c("Term","Z.score","Combined.Score","Adjusted.P.value","P.value","Overlapping Genes","gene_set_library","geneset")\nkable(config_s, format= "pandoc", caption = "Table 6: GO annotation Molecular Function for Up-regulated Genes")\n```\n\n```{r tab.cap="Samples", echo=FALSE}\nconfig=read.table(file="GO_Molecular_Function_Downregulated.tsv", header = TRUE, sep="\\t")\nconfig_s=config[,c(1,2,3,4,5,6,7,8)]\ncolnames(config_s)=c("Term","Z.score","Combined.Score","Adjusted.P.value","P.value","Overlapping Genes","gene_set_library","geneset")\nkable(config_s, format= "pandoc", caption = "Table 7: GO annotation terms Molecular Function for Down-regulated Genes")\n```\n\n```{r tab.cap="Samples", echo=FALSE}\nconfig=read.table(file="KEGG_pathway_Downregulated.tsv", header = TRUE, sep="\\t")\nconfig_s=config[,c(1,2,3,4,5,6,7,8)]\ncolnames(config_s)=c("Term","Z.score","Combined.Score","Adjusted.P.value","P.value","Overlapping Genes","gene_set_library","geneset")\nkable(config_s, format= "pandoc", caption = "Table 8: KEGG pathway for Downregulated genes")\n```\n\n```{r tab.cap="Samples", echo=FALSE}\nconfig=read.table(file="KEGG_pathway_Upregulated.tsv", header = TRUE, sep="\\t")\nconfig_s=config[,c(1,2,3,4,5,6,7,8)]\ncolnames(config_s)=c("Term","Z.score","Combined.Score","Adjusted.P.value","P.value","Overlapping Genes","gene_set_library","geneset")\nkable(config_s, format= "pandoc", caption = "Table 9: KEGG pathway for Upregulated genes")\n```\n\n```{r tab.cap="Samples", echo=FALSE}\nconfig=read.table(file="Reactome_pathway_Downregulated.tsv", header = TRUE, sep="\\t")\nconfig_s=config[,c(1,2,3,4,5,6,7,8)]\ncolnames(config_s)=c("Term","Z.score","Combined.Score","Adjusted.P.value","P.value","Overlapping Genes","gene_set_library","geneset")\nkable(config_s, format= "pandoc", caption = "Table 10: Reactome 2016 pathway for Downregulated genes")\n```\n\n```{r tab.cap="Samples", echo=FALSE}\nconfig=read.table(file="Reactome_pathway_Upregulated.tsv", header = TRUE, sep="\\t")\nconfig_s=config[,c(1,2,3,4,5,6,7,8)]\ncolnames(config_s)=c("Term","Z.score","Combined.Score","Adjusted.P.value","P.value","Overlapping Genes","gene_set_library","geneset")\nkable(config_s, format= "pandoc", caption = "Table 11: Reactome 2016 pathway for Upregulated genes")\n```\n\n```{r tab.cap="Samples", echo=FALSE}\nconfig=read.table(file="WikiPathways_pathway_Downregulated.tsv", header = TRUE, sep="\\t")\nconfig_s=config[,c(1,2,3,4,5,6,7,8)]\ncolnames(config_s)=c("Term","Z.score","Combined.Score","Adjusted.P.value","P.value","Overlapping Genes","gene_set_library","geneset")\nkable(config_s, format= "pandoc", caption = "Table 12: WikiPathways 2016 pathway for Downregulated genes")\n```\n\n```{r tab.cap="Samples", echo=FALSE}\nconfig=read.table(file="WikiPathways_pathway_Upregulated.tsv", header = TRUE, sep="\\t")\nconfig_s=config[,c(1,2,3,4,5,6,7,8)]\ncolnames(config_s)=c("Term","Z.score","Combined.Score","Adjusted.P.value","P.value","Overlapping Genes","gene_set_library","geneset")\nkable(config_s, format= "pandoc", caption = "Table 13: WikiPathways 2016 pathway for Upregulated genes")\n```\n\n```{r tab.cap="Samples", echo=FALSE}\nconfig=read.table(file="Pfam_InterPro_Domains_pathway_Upregulated.tsv", header = TRUE, sep="\\t")\nconfig_s=config[,c(1,2,3,4,5,6,7,8)]\ncolnames(config_s)=c("Term","Z.score","Combined.Score","Adjusted.P.value","P.value","Overlapping Genes","gene_set_library","geneset")\nkable(config_s, format= "pandoc", caption = "Table 14: Pfam Interpro Domain for Upregulated genes")\n```\n\n```{r tab.cap="Samples", echo=FALSE}\nconfig=read.table(file="Pfam_InterPro_Domains_Downregulated.tsv", header = TRUE, sep="\\t")\nconfig_s=config[,c(1,2,3,4,5,6,7,8)]\ncolnames(config_s)=c("Term","Z.score","Combined.Score","Adjusted.P.value","P.value","Overlapping Genes","gene_set_library","geneset")\nkable(config_s, format= "pandoc", caption = "Table 15: Pfam InterPro Domains Downregulated genes")\n```\n\n## Bioinformatics analysis Pipeline\nThe following bioinformatics steps were performed for analysis of the data.\n\n![](/MGMSTAR2/SHARED/RESOURCES/RNAseq_pipeline_files/pipeline_hisat.png){ width=100%}\n\n### Read quality check \nWe check the following parameters from fastq file\n. Base quality score distribution\n. Sequence quality score distribution\n. Average base content per read\n. GC distribution in the reads\n. PCR amplification issue\n. Check for over-represented sequences\n. Adapter trimming\n\n\nBased on quality report of fastq files we trim sequence read where necessary to only retain high quality sequence for further analysis. In addition, the low-quality sequence reads are excluded from the analysis. The adapter trimming was performed using Trimmomatic (v-0.36).\n\n### Contamination removal\n\nFor the RNA-Seq analysis we begin by removing the unwanted sequences, especially nonpolyA tailed RNAs from the sample (assuming that poly-A tailed RNAs are sequenced). The unwanted sequences include - mitochon-drial genome sequences, ribosomal RNAs, transfer RNAs, adapter sequences and others. Contamination removal was performed using Bowtie2 (2.2.4).\n\n### Read alignment\n\nThe paired-end reads are aligned to the reference human genome Feb. 2009 release downloaded from UCSC database (GRCh37/hg19).The chromosome fasta file was downloaded from the following website (http://hgdownload.soe.ucsc.edu/goldenPath/hg19/bigZips/chromFa.tar.gz). GTF file was downloaded from the following website (ftp://ftp.ensembl.org/pub/release75/gtf/homo_sapiens/Homo_sapiens.GRCh37.75.gtf.gz). Alignment was performed using HISAT2 (2.1.0)\n\n### Expression estimation\n\nThe aligned reads are used for estimating expression of the genes. The raw read counts were estimated using featureCount (1.5.2). Read count data were normalized using DESeq2.\n\n\n### Differential expression\nThe raw read counts were normalized using Deseq2.\n\n### Pathway analysis\n\nEnrichment results were generated by analyzing the up-regulated and down-regulated gene sets using Enrichr. The following libraries were used for the analysis: KEGG_2016, Reactome_2016, WikiPathways_2016. Significant terms are determined by using a cut-off of p-value<0.1 after applying Benjamini-Hochberg correction. For more information on the methods used to perform the enrichment analysis, see the Enrichr section.\n\n')

	reportFile_html=open(outDir+'/'+ProjectID+'/'+ProjectID+'_Report_html_final.Rmd','w')
	reportFile_html.write('---\nheader-includes:\n- \usepackage{fancyhdr}\n- \usepackage{lipsum}\n- \pagestyle{fancy}\n- \\fancyhead[CO,CE]{This is fancy header}\n- \\fancyfoot[CO,CE]{And this is a fancy footer}\n- \\fancyfoot[LE,RO]{\\thepage}\noutput:\n  html_document:\n    toc: yes\n    toc_float:\n      collapsed: no\n      smooth_scroll: no\n  pdf_document:\n    toc: yes\n---\n\n```{r setup, include=FALSE, warning=FALSE}\nknitr::opts_chunk$set(echo=FALSE, warning=FALSE, message=FALSE)\npkg <- c("rmarkdown","knitr", "devtools", "DT", "xtable","kableExtra","ggplot2","captioner")\nnew.pkg <- pkg[!(pkg %in% installed.packages())]\nif (length(new.pkg)) {\n  install.packages(new.pkg, repos = "http://cran.rstudio.com")\n}\nlibrary(knitr)\nlibrary(DT)\nlibrary(xtable)\nlibrary(kableExtra)\nlibrary(captioner)\nlibrary(shiny)\nlibrary(plotly)\nlibrary(ggplot2)\ntable_nums<-captioner(prefix= "Table.")\n```\n\n## Overview\n\n### Sample Information\nFollowing samples were sequenced and analyzed.\n\n```{r tab.cap="Samples", echo=FALSE}\nconfig=read.table(file="sampleInfo.txt", header = TRUE, sep="\\t")\nconfig_s=config[,c(1,3)]\nkable(config_s, "html", caption = "Table 1: Sample Information") %>%\n  kable_styling(bootstrap_options = "striped", full_width = F, position = "left")\n```\n\n---\n\n### Quality Metrics\nSummary of the overall data generated and the average read quality observed across the reads.\n\n```{r tab.cap="Samples", echo=FALSE}\nconfig=read.table(file="FastQSummary.txt", header = TRUE, sep="\\t")\nconfig_s=config[,c(1,2,3,4,5,6,7,8)]\ncolnames(config_s)=c("Sample Name","Total No. of Reads","Average Base Quality","GC Percentage","Total Data >= Q30 %","Total Data >= Q20 and < 30 %","Total Data >= Q10 and < 20 %","Average Read Length")\nkable(config_s, "html", caption = "Table 2: FastQC Summary") %>%\n  kable_styling(bootstrap_options = "striped", full_width = F, position = "left" )\n```\n\n---\n\n###Alignment Metrics {.tabset .tabset-fade}\n\nBased on quality report of the fastq files the reads are processed to retain high quality sequence, remove adapters and eliminate contamination. The preprocessed reads are aligned to the reference genome. Reads retained after each of these preprocessing steps and the alignment percentage is represented below.\n\n####Alignment Summary\n\n```{r tab.cap="Samples", echo=FALSE}\nconfig=read.table(file="ReadCount_summary.txt", header = TRUE, sep="\\t")\nconfig_s=config[,c(1,2,3,4,5,6)]\ncolnames(config_s)=c("Sample Name","Total Reads","Read Count After Adapter Trimming","Read Count After Contamination Removal","Reads Aligned"," Alignment %")\nkable(config_s, "html", caption = "Table 2: Alignment Summary") %>%\n  kable_styling(bootstrap_options = "striped", full_width = F, position = "left" )\n```\n\n```{r, echo=FALSE, warning=FALSE, message=FALSE, fig.align="center", fig.cap="Figure 1: Alignment metrics:The figure represents an interactive stacked bar plot showing percentage of reads filtered and aligned at each step."}\nlibrary(scales)\nlibrary(reshape2)\nalign <- read.table("Alignment_Plot.txt",header=TRUE,sep="\\t", check.names = FALSE)\nmeltstack <- melt(align)\nmeltstack$variable <- factor(meltstack$variable, levels=c("Adapter Reads","Contaminated Reads","Aligned Reads","Unaligned Reads"))\np=ggplot(meltstack, aes(x=SampleName, y=value, fill=variable))+ geom_bar(stat="identity", position = "fill") + scale_y_continuous(labels = percent_format())+theme_bw()+theme(strip.text = element_text(size=10, face="bold", family="cambria"), axis.text.x=element_text(size=8,family="cambria", face="bold",angle=90,hjust=1), axis.title.x = element_blank(), axis.title.y=element_text(family="cambria", size=12, face="bold"), axis.text.y = element_text(size=8,family="cambria"), legend.text = element_text(family = "cambria", size=10), plot.title = element_text(size=12, face="bold", family="cambria", hjust = 0.5), plot.subtitle = element_text(size=12, family="cambria", hjust = 0.5), panel.grid = element_blank(), axis.ticks.x = element_blank(),legend.title = element_blank(), legend.position = "right", legend.direction = "vertical") + labs(y="Percentage of reads")\nggplotly(p)\n```\n\n---\n\n#### Sequence Alignment Distribution\n\n```{r tab.cap="Samples", echo=FALSE}\nconfig=read.table(file="Sequence_alignment_dist.txt", header = TRUE, sep="\\t")\nconfig_s=config[,c(1,2,3,4,5)]\ncolnames(config_s)=c("SampleName","Exonic","Intronic","Intergenic","Overlapping exon")\nkable(config_s, "html", caption = "Table 3: Distribution of Read in genomic regions") %>%\n  kable_styling(bootstrap_options = "striped", full_width = F, position = "left")\n```\n\n---\n\n#### Analysis of Splice Junctions\n\n```{r, echo=FALSE, warning=FALSE, message=FALSE , fig.align="centre",fig.cap="Figure 2: Splice Junction Distribution metrics: Stacked bar plot showing Number of reads distributed in known and novel splice junctions"}\nlibrary (scales)\nlibrary(ggplot2)\nlibrary(reshape2)\nalign <- read.table("Splice_Junction_Distribution.txt",header=TRUE,sep="\\t", check.names = FALSE)\nmeltstack <- melt(align)\nmeltstack$variable <- factor(meltstack$variable, levels=c("Sample Name","Total splicing Junctions","Known Splicing Junctions","Partial Novel Splicing Junctions","Novel Splicing Junctions"))\np=ggplot(meltstack, aes(x=SampleName,y=value,fill=variable))+geom_bar(stat="identity", position = "fill")+scale_y_continuous(labels = percent_format())+theme_bw()+theme(strip.text = element_text(size=10, face="bold", family="cambria"),axis.text.x = element_text(size=8,family="cambria", face="bold",angle=90,hjust=1), axis.title.x = element_blank(), axis.title.y=element_text(family="cambria", size=12, face="bold"), axis.text.y = element_text(size=8,family="cambria"), legend.text = element_text(family = "cambria", size=10), plot.title = element_text(size=12, face="bold", family="cambria", hjust = 0.5), plot.subtitle = element_text(size=12, family="cambria", hjust = 0.5), panel.grid = element_blank(), axis.ticks.x = element_blank(),legend.title = element_blank(), legend.position = "right", legend.direction = "vertical") + labs(y="Number of Splice Junctions")\nggplotly(p)\n```\n\n---\n\n### PCA\n\nPrincipal Component Analysis (PCA) is a statistical technique used to identify global patterns in high-dimensional datasets. It is commonly used to explore the similarity of biological samples in RNA-seq datasets. To achieve this, gene expression values are transformed into Principal Components (PCs), a set of linearly uncorrelated features which represent the most relevant sources of variance in the data, and subsequently visualized using a scatter plot.\n\n```{r, echo=FALSE, warning=FALSE, message=FALSE, fig.align="centre",fig.cap="Figure 3: The figure displays an interactive, three-dimensional scatter plot of the first two Principal Components (PCs) of the data. Each point represents an RNA-seq sample. Samples with similar gene expression profiles are closer in the three-dimensional space. If provided, sample groups are indicated using different colors, allowing for easier interpretation of the results."}\nlibrary (scales)\nlibrary(ggplot2)\nlibrary(reshape2)\nmydata <- read.table("Deseq_input_merge_count.txt",header=TRUE,sep="\\t", check.names = FALSE, row.names = 1)\ntmydata <- t(mydata)\npcaCars <- prcomp(tmydata, cor = TRUE)\ncarsHC <- hclust(dist(pcaCars$x))\ncarsClusters <- cutree(carsHC, k = 3)\ncarsDf <- data.frame(pcaCars$x, "cluster" = factor(carsClusters))\ncarsDf <- transform(carsDf, cluster_name = paste("Cluster",carsClusters))\nlibrary(plotly)\np <- plot_ly(carsDf, x = carsDf$PC1 , y = carsDf$PC2, text = rownames(carsDf),\n          mode = "markers", color = carsDf$cluster_name, marker = list(size = 11))\np <- layout(p, title = "PCA Clusters of the samples",\n        xaxis = list(title = "PC 1"),\n        yaxis = list(title = "PC 2"))\np\n```\n---\n\n###Differential Expression {.tabset .tabset-fade}\n\nGene expression signatures are alterations in the patterns of gene expression that occur as a result of cellular perturbations such as drug treatments, gene knock-downs or diseases. They can be quantified using differential gene expression (DGE) methods, which compare gene expression between two groups of samples to identify genes whose expression is significantly altered in the perturbation. The signature table is used to interactively display the results of such analyses.\n\n```{r tab.cap="Samples", echo=FALSE}\nconfig=read.table(file="Differential_expressed_genes_summary.txt", header = TRUE, sep="\\t")\nconfig_s=config[,c(1,2,3)]\ncolnames(config_s)=c("Comparision", "Number of Upregulated Genes", "Number of Upregulated Genes")\nkable(config_s,format="pandoc", caption = "Table 5: Differentially expressed genes")\n```\n\n####Volcano Plot\nVolcano plots are a type of scatter plot commonly used to display the results of a differential gene expression analysis. They can be used to quickly identify genes whose expression is significantly altered in a perturbation, and to assess the global similarity of gene expression in two groups of biological samples. Each point in the scatter plot represents a gene; the axes display the significance versus fold-change estimated by the differential expression analysis.\n\n```{r, echo=FALSE, warning=FALSE, message=FALSE , fig.align="centre",fig.cap="Figure 4: The figure contains a scatter plot which displays the log2-fold changes and statistical significance of each gene calculated by performing a differential gene expression analysis. Every point in the plot represents a gene. Red points indicate significantly up-regulated genes, blue points indicate down-regulated genes."}\nlibrary(grid)\nres=read.table(file="Deseq_result.txt", header = TRUE, sep="\\t")\nval = -log10(0.05)\nvolcanoplot <- function (res, sigthresh=0.05, main="Volcano Plot", legendpos="topright", labelsig=TRUE, textcx=1, ...) {\nwith(res, plot(log2FoldChange, -log10(pvalue), pch=20, main=main, ...))\nwith(subset(res, pvalue<sigthresh ), points(log2FoldChange, -log10(pvalue), pch=20, col="green", ...))\nwith(subset(res, pvalue<sigthresh & (log2FoldChange)> 1), points(log2FoldChange, -log10(pvalue), pch=20, col="red", ...))\nwith(subset(res, pvalue<sigthresh & (log2FoldChange) < -1), points(log2FoldChange, -log10(pvalue), pch=20, col="blue", ...))\nabline(h=val, lty=2, col="black")\nabline(v=2,lty=2,col="black")\nabline(v=-2,lty=2,col="black")\nlegend(legendpos, xjust=1, yjust=1, legend=c("non-significant", "significant-up", "significant-down"),col=c("black","red","blue"),pch=20)\n}\nvolcanoplot(res, sigthresh=0.05, textcx=.8, ylim=c(0, 4))\n```\n\n####Heatmap\nHeatmaps help in the visualization of the top upregulated and downregulated genes.\n\n```{r, echo=FALSE, warning=FALSE, message=FALSE , fig.align="centre",fig.cap="Figure 5: The figure shows an interactive heatmap plot which displays the top 50 up-regulated genes and down-regulated genes on a gradient scale based on expression"}\nlibrary(grid)\ntop100 <- read.table("Combined_top50_genes_normalised_readcount_genename.txt", header=TRUE, check.names=FALSE, row.names = 1)\nmydata <- top100[c(2:5)]\ndata=as.matrix(mydata)\nplot_ly(x=colnames(data), y=rownames(data), z = data, type = "heatmap")\n```\n\n---\n\n###Gene Ontology Enrichment Analysis {.tabset .tabset-fade}\n\nGene Ontology (GO) is a major bioinformatics initiative aimed at unifying the representation of gene attributes across all species. It contains a large collection of experimentally validated and predicted associations between genes and biological terms. This information can be leveraged by Enrichr to identify the biological processes, molecular functions and cellular components which are over-represented in the up-regulated and down-regulated genes identified by comparing two groups of samples.\n\n####Molecular Function {.tabset .tabset-pills}\n\n#####Upregulated\n\n```{r tab.cap="Samples", echo=FALSE}\nconfig=read.table(file="GO_Molecular_Function_Upregulated.tsv", header = TRUE, sep="\\t")\ndatatable(config, extensions = c("FixedColumns", "Buttons"), options = list(scrollX = TRUE, dom = "Bfrtip",  columnDefs = list(list(width = "100%", targets = list(1))), buttons = c("csv", "excel"),autowidth =TRUE, pageLength = 3, language = list(search = "Filter:")))\n```\n\n#####Downregulated\n\n```{r tab.cap="Samples", echo=FALSE}\nconfig=read.table(file="GO_Molecular_Function_Downregulated.tsv", header = TRUE, sep="\\t")\ndatatable(config, extensions = c("FixedColumns", "Buttons"), options = list(scrollX = TRUE, dom = "Bfrtip",  columnDefs = list(list(width = "100%", targets =list(1))),buttons = c("csv", "excel"),autowidth =TRUE, pageLength = 3, language = list(search = "Filter:")))\n```\n\n####Cellular Component {.tabset .tabset-pills}\n\n#####Upregulated\n\n```{r tab.cap="Samples", echo=FALSE}\nconfig=read.table(file="GO_Cellular_Component_Upregulated.tsv", header = TRUE, sep="\\t")\ndatatable(config, extensions = c("FixedColumns", "Buttons"), options = list(scrollX = TRUE, dom = "Bfrtip",  columnDefs = list(list(width = "100%", targets = list(1))), buttons = c("csv", "excel"),autowidth =TRUE, pageLength = 3, language = list(search = "Filter:")))\n```\n\n#####Downregulated\n\n```{r tab.cap="Samples", echo=FALSE}\nconfig=read.table(file="GO_Cellular_Component_Downregulated.tsv", header = TRUE, sep="\\t")\ndatatable(config, extensions = c("FixedColumns", "Buttons"), options = list(scrollX = TRUE, dom = "Bfrtip",  columnDefs = list(list(width = "100%", targets = list(1))), buttons = c("csv", "excel"),autowidth =TRUE, pageLength = 3, language = list(search = "Filter:")))\n```\n\n####Biological Process {.tabset .tabset-pills}\n\n#####Upregulated\n\n```{r tab.cap="Samples", echo=FALSE}\nconfig=read.table(file="GO_Biological_Process_Upregulated.tsv", header = TRUE, sep="\\t")\ndatatable(config, extensions = c("FixedColumns", "Buttons"), options = list(scrollX = TRUE, dom = "Bfrtip",  columnDefs = list(list(width = "100%", targets = list(1))), buttons = c("csv", "excel"),autowidth =TRUE, pageLength = 3, language = list(search = "Filter:")))\n```\n\n#####Downregulated\n\n```{r tab.cap="Samples", echo=FALSE}\nconfig=read.table(file="GO_Biological_Process_Downregulated.tsv", header = TRUE, sep="\\t")\ndatatable(config, extensions = c("FixedColumns", "Buttons"), options = list(scrollX = TRUE, dom = "Bfrtip",  columnDefs = list(list(width = "100%", targets = list(1))), buttons = c("csv", "excel"),autowidth =TRUE, pageLength = 3, language = list(search = "Filter:")))\n```\n\n### Pathway Analysis {.tabset .tabset-fade}\n\nBiological pathways are sequences of interactions between biochemical compounds which play a key role in determining cellular behavior. Databases such as KEGG, Reactome and WikiPathways contain a large number of associations between such pathways and genes. This information can be leveraged by Enrichr to identify the biological pathways which are over-represented in the up-regulated and down-regulated genes identified by comparing two groups of samples.\n\n####KEGG Pathways {.tabset .tabset-pills}\n\n#####Upregulated Pathways\n\n```{r tab.cap="Samples", echo=FALSE}\nconfig=read.table(file="KEGG_pathway_Upregulated.tsv", header = TRUE, sep="\\t")\ndatatable(config, extensions = c("FixedColumns", "Buttons"), options = list(scrollX = TRUE, dom = "Bfrtip",  columnDefs = list(list(width = "100%", targets = list(1))), buttons = c("csv", "excel"),autowidth =TRUE, pageLength = 3, language = list(search = "Filter:")))\n```\n\n#####Downregulated Pathways\n\n```{r tab.cap="Samples", echo=FALSE}\nconfig=read.table(file="KEGG_pathway_Downregulated.tsv", header = TRUE, sep="\\t")\ndatatable(config, extensions = c("FixedColumns", "Buttons"), options = list(scrollX = TRUE, dom = "Bfrtip",  columnDefs = list(list(width = "100%", targets = list(1))), buttons = c("csv", "excel"),autowidth =TRUE, pageLength = 3, language = list(search = "Filter:")))\n```\n\n####REACTOME Pathways {.tabset .tabset-pills}\n\n#####Upregulated Pathways\n\n```{r tab.cap="Samples", echo=FALSE}\nconfig=read.table(file="Reactome_pathway_Downregulated.tsv", header = TRUE, sep="\\t")\nconfig_s=config[,c(1,2,3,4,5,6,7,8)]\ndatatable(config, extensions = c("FixedColumns", "Buttons"), options = list(scrollX = TRUE, dom = "Bfrtip",  columnDefs = list(list(width = "100%", targets = list(1))), buttons = c("csv", "excel"),autowidth =TRUE, pageLength = 3, language = list(search = "Filter:")))\n```\n\n#####Downregulated Pathways\n\n```{r tab.cap="Samples", echo=FALSE}\nconfig=read.table(file="Reactome_pathway_Upregulated.tsv", header = TRUE, sep="\\t")\ndatatable(config, extensions = c("FixedColumns", "Buttons"), options = list(scrollX = TRUE, dom = "Bfrtip",  columnDefs = list(list(width = "100%", targets = list(1))), buttons = c("csv", "excel"),autowidth =TRUE, pageLength = 3, language = list(search = "Filter:")))\n```\n\n####Wiki Pathways {.tabset .tabset-pills}\n\n#####Upregulated Pathways\n\n```{r tab.cap="Samples", echo=FALSE}\nconfig=read.table(file="WikiPathways_pathway_Downregulated.tsv", header = TRUE, sep="\\t")\ndatatable(config, extensions = c("FixedColumns", "Buttons"), options = list(scrollX = TRUE, dom = "Bfrtip",  columnDefs = list(list(width = "100%", targets = list(1))), buttons = c("csv", "excel"),autowidth =TRUE, pageLength = 3, language = list(search = "Filter:")))\n```\n\n#####Downregulated Pathways\n```{r tab.cap="Samples", echo=FALSE}\nconfig=read.table(file="WikiPathways_pathway_Downregulated.tsv", header = TRUE, sep="\\t")\ndatatable(config, extensions = c("FixedColumns", "Buttons"), options = list(scrollX = TRUE, dom = "Bfrtip",  columnDefs = list(list(width = "100%", targets = list(1))), buttons = c("csv", "excel"),autowidth =TRUE, pageLength = 3, language = list(search = "Filter:")))\n```\n\n---\n\n### Bioinformatics analysis Pipeline\n\nThe following bioinformatics steps were performed for analysis of the data.\n\n![](/MGMSTAR2/SHARED/RESOURCES/RNAseq_pipeline_files/pipeline_hisat.png){ width=100%}\n\n#### Read quality check\nWe check the following parameters from fastq file\n . Base quality score distribution\n . Sequence quality score distribution\n . Average base content per read\n . GC distribution in the reads\n . PCR amplification issue\n . Check for over-represented sequences\n . Adapter trimming\n\nBased on quality report of fastq files we trim sequence read where necessary to only retain high quality sequence for further analysis. In addition, the low-quality sequence reads are excluded from the analysis. The adapter trimming was performed using Trimmomatic (v-0.36).\n\n#### Contamination removal\n\nFor the RNA-Seq analysis we begin by removing the unwanted sequences, especially nonpolyA tailed RNAs from the sample (assuming that poly-A tailed RNAs are sequenced). The unwanted sequences include - mitochon-drial genome sequences, ribosomal RNAs, transfer RNAs, adapter sequences and others. Contamination removal was performed using Bowtie2 (2.2.4).\n\n#### Read alignment\n\nThe paired-end reads are aligned to the reference human genome Feb. 2009 release downloaded from UCSC database (GRCh37/hg19).The chromosome fasta file was downloaded from the following website (http://hgdownload.soe.ucsc.edu/goldenPath/hg19/bigZips/chromFa.tar.gz). GTF file was downloaded from the following website (ftp://ftp.ensembl.org/pub/release75/gtf/homo_sapiens/Homo_sapiens.GRCh37.75.gtf.gz). Alignment was performed using HISAT2 (2.1.0)\n\n#### Expression estimation\n\nThe aligned reads are used for estimating expression of the genes. The raw read counts were estimated using featureCount (1.5.2). Read count data were normalized using DESeq2.\n\n#### Differential expression\n\n####Gene Ontology Enrichment Analysis\n\nEnrichment results were generated by analyzing the up-regulated and down-regulated gene sets using Enrichr. The following libraries were used for the analysis: GO_Biological_Process_2017b, GO_Molecular_Function_2017b, GO_Cellular_Component_2017b. Significant terms are determined by using a cut-off of p-value<0.1 after applying Benjamini-Hochberg correction. For more information on the methods used to perform the enrichment analysis, see the Enrichr section.\n\n#### Pathway analysis\n\nEnrichment results were generated by analyzing the up-regulated and down-regulated gene sets using Enrichr. The following libraries were used for the analysis: KEGG_2016, Reactome_2016, WikiPathways_2016. Significant terms are determined by using a cut-off of p-value<0.1 after applying Benjamini-Hochberg correction. For more information on the methods used to perform the enrichment analysis, see the Enrichr section.')
	reportFile_doc.close()	
	reportFile_html.close()
